{"version":3,"sources":["slax.js"],"names":["define","skylark","objects","hoster","async","Xhr","eventer","_config","_rootUrl","_baseUrl","slax","prepare","config","p","slaxRoot","slaxApp","global","slaxConfig","scripts","document","getElementsByTagName","i","script","slaxDir","src","match","length","getAttribute","eval","undefined","mixin","Deferred","resolve","d","promise","get","then","slaxAppPath","apps","name","dir","start","cfg","require","runtime","initApp","spa","_cfg","app","go","path","force","run","spaModule","_start","attach"],"mappings":";;;;;;;AAAAA,QACC,mBACA,wBACA,uBACA,sBACA,uBACA,wBACC,SAASC,QAASC,QAASC,OAAQC,MAAOC,IAAKC,SAE7C,IAAIC,WAIJC,SAAW,GACXC,SAAW,GAIPC,MACAC,QAAU,SAASC,QACf,IAAIC,EAAEC,SAASC,QAIf,GAHKH,SACDA,OAAST,OAAOa,OAAOC,aAEtBL,OAID,IAHA,IAAIM,QAAUC,SAASC,qBAAqB,UACxCC,EAAI,EACJC,OAAQC,QAASC,IAAKC,MACpBJ,EAAIH,QAAQQ,QAEd,GADAJ,OAASJ,QAAQG,MACbG,IAAMF,OAAOK,aAAa,UAAYF,MAAQD,IAAIC,MAAM,gEAAgE,CAExHF,QAAUE,MAAM,IAAM,IAGnBD,IAAMF,OAAOK,aAAa,qBACzBf,OAASgB,KAAK,MAAQJ,IAAM,QAE5BV,SAAWQ,OAAOK,aAAa,uBACfE,GAAZf,WACAA,SAAWS,SAEfR,QAAUO,OAAOK,aAAa,kBAElC,MAKZ,GAAIf,OACAV,QAAQ4B,MAAMvB,QAAQK,QACtBC,EAAIT,MAAM2B,SAASC,cAChB,CACH,IAAIC,EAAI,IAAI7B,MAAM2B,SACdlB,EAAIoB,EAAEC,QACV7B,IAAI8B,IAAIrB,SAAW,qBAAqBsB,KAAK,SAASxB,GAClD,GAAIG,QAAS,CAET,IADA,IAAIsB,EACKhB,EAAE,EAAGA,EAAET,EAAO0B,KAAKZ,OAAOL,IAC3BT,EAAO0B,KAAKjB,GAAGkB,MAAQxB,UACvBsB,EAAcvB,SAAWF,EAAO0B,KAAKjB,GAAGmB,KAGhDnC,IAAI8B,IAAIE,EAAY,aAAaD,KAAK,SAASxB,GAC3CV,QAAQ4B,MAAMvB,QAAQK,GACtBqB,EAAED,iBAGN9B,QAAQ4B,MAAMvB,QAAQK,GACtBqB,EAAED,YAOd,OAAOnB,GAGX4B,MAAQ,WACJ,IAAIC,EAAMnC,QAMToC,QAAQ/B,OAAO8B,EAAIE,SAGpB,IAAIC,EAAU,SAASC,EAAKC,GAGxB,IAAIC,EAAMF,EAFVC,EAAOA,GAAQL,GAIfvC,OAAOa,OAAOiC,GAAM,SAASC,EAAMC,GAC/BH,EAAIC,GAAGC,EAAMC,IAGjBH,EAAIrC,UAAUyB,KAAK,WACfY,EAAII,SAGTV,EAAIW,UACHV,SAASD,EAAIW,WAAY,SAASP,GAC3BA,EAAIQ,OACHR,EAAIQ,SAASlB,KAAK,SAASW,GACvBF,EAAQC,EAAKC,KAGjBF,EAAQC,KAIhBD,EAAQ5C,QAAQ6C,OAS5B,OAJA9C,OAAO,UAAU,WACb,OAAOU,OAGJT,QAAQsD,OAAO,OAAO7C","file":"../slax.js","sourcesContent":["define([\r\n\t\"skylark-langx-ns\",\r\n\t\"skylark-langx-objects\",\r\n\t\"skylark-langx-hoster\",\r\n\t\"skylark-langx-async\",\r\n\t\"skylark-net-http/Xhr\",\r\n\t\"skylark-domx-eventer\"\r\n],function(skylark, objects, hoster, async, Xhr, eventer){\r\n\r\n    var _config = {\r\n\r\n\r\n    },\r\n    _rootUrl = \"\",  //The root url of slax system\r\n    _baseUrl = \"\";  //the base url of slax app\r\n\r\n\r\n\r\n    var slax = {\r\n        prepare : function(config) {\r\n            var p,slaxRoot,slaxApp;\r\n            if (!config) {\r\n                config = hoster.global.slaxConfig;\r\n            }\r\n            if (!config) {\r\n                var scripts = document.getElementsByTagName(\"script\"),\r\n                    i = 0,\r\n                    script, slaxDir, src, match;\r\n                while(i < scripts.length){\r\n                    script = scripts[i++];\r\n                    if((src = script.getAttribute(\"src\")) && (match = src.match(/(((.*)\\/)|^)skylark-slax-runtime([0-9A-Za-z\\-]*)\\.js(\\W|$)/i))){\r\n                        // sniff slaxDir and baseUrl\r\n                        slaxDir = match[3] || \"\";\r\n\r\n                        // sniff configuration on attribute in script element\r\n                        if(src = script.getAttribute(\"data-slax-config\") ){\r\n                            config = eval(\"({ \" + src + \" })\");\r\n                        } else {\r\n                            slaxRoot = script.getAttribute(\"data-slax-root\");\r\n                            if (slaxRoot == undefined) {\r\n                                slaxRoot = slaxDir;\r\n                            }\r\n                            slaxApp = script.getAttribute(\"data-slax-app\");\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (config) {\r\n                objects.mixin(_config,config);\r\n                p = async.Deferred.resolve()\r\n            } else {\r\n                var d = new async.Deferred(),\r\n                    p = d.promise;\r\n                Xhr.get(slaxRoot + \"/slax-config.json\").then(function(config){\r\n                    if (slaxApp) {\r\n                        var slaxAppPath;\r\n                        for (var i=0; i<config.apps.length;i++) {\r\n                            if (config.apps[i].name == slaxApp) {\r\n                                slaxAppPath = slaxRoot + config.apps[i].dir;\r\n                            } \r\n                        }\r\n                        Xhr.get(slaxAppPath+\"/spa.json\").then(function(config){\r\n                            objects.mixin(_config,config);\r\n                            d.resolve();\r\n                        });\r\n                    } else {\r\n                        objects.mixin(_config,config);\r\n                        d.resolve();\r\n\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            return p;\r\n        },\r\n\r\n        start : function() {\r\n            var cfg = _config;\r\n\r\n            //if (cfg.contextPath) {\r\n            //  _cfg.baseUrl = cfg.contextPath;\r\n            //}\r\n\r\n             require.config(cfg.runtime);\r\n\r\n           \r\n            var initApp = function(spa, _cfg) {\r\n                _cfg = _cfg || cfg;\r\n  \r\n                var app = spa(_cfg);\r\n\r\n                hoster.global.go =  function(path, force) {\r\n                    app.go(path, force);\r\n                };\r\n\r\n                app.prepare().then(function(){\r\n                    app.run();\r\n                });\r\n            };\r\n            if(cfg.spaModule) {\r\n                require([cfg.spaModule], function(spa) {\r\n                    if(spa._start) {\r\n                        spa._start().then(function(_cfg){\r\n                            initApp(spa, _cfg);\r\n                        });\r\n                    } else {\r\n                        initApp(spa);\r\n                    }\r\n                });\r\n            } else {\r\n                initApp(skylark.spa);\r\n            }\r\n        }\r\n    };\r\n\r\n    define(\"slax\",[],function(){\r\n        return slax;\r\n    });\r\n\r\n    return skylark.attach(\"slax\",slax);\r\n\r\n});"]}