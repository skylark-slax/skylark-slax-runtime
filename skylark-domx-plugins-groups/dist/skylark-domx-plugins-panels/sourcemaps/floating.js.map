{"version":3,"sources":["floating.js"],"names":["define","noder","eventer","$","plugins","Movable","panels","Panel","floatings","Floating","inherit","klassName","pluginName","options","selectors","headerPane","contentPane","footerPane","titlebar","buttons","fullscreen","maximize","minimize","close","classes","fixedContent","initMaximized","movable","dragHandle","dragCancel","_construct","elm","prototype","call","this","$pane","_elm","isOpened","isMaximized","_movable","handle","starting","e","target","closest","length","isResizing","$close","_velm","$maximize","$minimize","$fullscreen","off","on","_keydown","push","trigger","remove","idx","indexOf","splice","get","focus","$W","window","$D","document","removeClass","initModalLeft","width","modalWidth","scrollLeft","initModalTop","height","modalHeight","scrollTop","css","modalData","left","top","offset","addClass","resized","keyboard","keyCode","which","charCode","ctrlKey","metaKey","altKey","i"],"mappings":"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","file":"../floating.js","sourcesContent":["define([\r\n    \"skylark-domx/noder\",\r\n    \"skylark-domx/eventer\",\r\n    \"skylark-domx/query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"skylark-domx-plugins-interact/movable\",\r\n    \"./panels\",\r\n    \"./panel\"\r\n], function (noder,eventer,$,plugins,Movable, panels,Panel) {\r\n    'use strict';\r\n\r\n    var floatings = [];\r\n\r\n    var Floating = Panel.inherit({\r\n        klassName : \"Floating\",\r\n\r\n        pluginName : \"lark.panels.floating\",\r\n\r\n        options : {\r\n            selectors : {\r\n                headerPane  : \"\",\r\n                contentPane : \"\",\r\n                footerPane  : \"\",\r\n                titlebar : \"\",\r\n                buttons : {\r\n                    \"fullscreen\" : \".button-fullscreen\",\r\n                    \"maximize\" : \".button-maximize\",\r\n                    \"minimize\" : \".button-minimize\",     \r\n                    \"close\" : \".button-close\"\r\n                }\r\n            },\r\n\r\n            classes : {\r\n                \"maximize\" : \"maximize\"\r\n            },\r\n\r\n            fixedContent: true,\r\n            initMaximized: false,\r\n\r\n            movable : {\r\n                dragHandle: false,\r\n                dragCancel: null\r\n            }\r\n        },\r\n\r\n        _construct : function(elm,options) {\r\n            Panel.prototype._construct.call(this,elm,options);\r\n            this.$pane = $(this._elm);\r\n\r\n            this.isOpened = false;\r\n            this.isMaximized = false;\r\n\r\n            if (this.options.movable) {\r\n                this._movable = new Movable(elm,{\r\n                    handle : this.options.movable.dragHandle,\r\n                    starting : (e) => {\r\n                        const   dragCancel = this.options.movable.dragCancel, \r\n                                elemCancel = $(e.target).closest(dragCancel);\r\n                        if (elemCancel.length) {\r\n                            return false;\r\n                        }\r\n                        if (this.isResizing || this.isMaximized) {\r\n                            return false;\r\n                        }\r\n\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            this.$close = this._velm.$(this.options.selectors.buttons.close);\r\n            this.$maximize = this._velm.$(this.options.selectors.buttons.maximize);\r\n            this.$minimize = this._velm.$(this.options.selectors.buttons.minimize);\r\n            this.$fullscreen = this._velm.$(this.options.selectors.buttons.fullscreen);\r\n\r\n\r\n            this.$close.off(\"click.window\").on(\"click.window\", e => {\r\n                this.close();\r\n            });\r\n            this.$fullscreen.off(\"click.window\").on(\"click.window\", () => {\r\n                this.fullscreen();\r\n            });\r\n            this.$maximize.off(\"click.window\").on(\"click.window\", () => {\r\n                this.maximize();\r\n            });\r\n            this.$pane.off(\"keydown.window\").on(\"keydown.window\", e => {\r\n                this._keydown(e);\r\n            });\r\n\r\n            floatings.push(this);\r\n        },\r\n        close: function() {\r\n            this.trigger('closing', this);\r\n            this.$pane.remove();\r\n            this.isOpened = false;\r\n            this.isMaximized = false;\r\n\r\n            ///if (!$(Constants.CLASS_NS + '-modal').length) {\r\n            ///    if (this.options.fixedContent) {\r\n            ///        $('html').css({\r\n            ///            overflow: '',\r\n            ///            'padding-right': ''\r\n            ///        });\r\n            ///    }\r\n                ///if (this.options.multiInstances) {\r\n                ///    zIndex = this.options.zIndex;\r\n                ///}\r\n            ///    eventer.off(window,\"resize.window\");\r\n            var idx = floatings.indexOf(this);\r\n            if (idx>-1) {\r\n                floatings.splice(idx,1);\r\n            }\r\n            this.trigger('closed', this);\r\n        },\r\n\r\n        maximize: function() {\r\n            this.$pane.get(0).focus();\r\n            if (!this.isMaximized) {\r\n                this.modalData = {\r\n                    width: this.$pane.width(),\r\n                    height: this.$pane.height(),\r\n                    left: this.$pane.offset().left,\r\n                    top: this.$pane.offset().top\r\n                };\r\n                this.$pane.addClass(this.options.classes.maximize);\r\n                this.$pane.css({\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    left: 0,\r\n                    top: 0\r\n                });\r\n                this.isMaximized = true;\r\n            } else {\r\n                let $W = $(window),$D = $(document);\r\n                this.$pane.removeClass(this.options.classes.maximize);\r\n                const initModalLeft = ($W.width() - this.options.modalWidth) / 2 + $D.scrollLeft();\r\n                const initModalTop = ($W.height() - this.options.modalHeight) / 2 + $D.scrollTop();\r\n                this.$pane.css({\r\n                    width: this.modalData.width ? this.modalData.width : this.options.modalWidth,\r\n                    height: this.modalData.height ? this.modalData.height : this.options.modalHeight,\r\n                    left: this.modalData.left ? this.modalData.left : initModalLeft,\r\n                    top: this.modalData.top ? this.modalData.top : initModalTop\r\n                });\r\n                this.isMaximized = false;\r\n            }\r\n\r\n            eventer.resized(this._elm);\r\n        },\r\n        fullscreen: function() {\r\n            this.$pane.get(0).focus();\r\n            noder.fullscreen(this.$pane[0]);\r\n        },\r\n        _keydown: function(e) {\r\n            if (!this.options.keyboard) {\r\n                return false;\r\n            }\r\n            const keyCode = e.keyCode || e.which || e.charCode;\r\n            const ctrlKey = e.ctrlKey || e.metaKey;\r\n            const altKey = e.altKey || e.metaKey;\r\n            switch (keyCode) {\r\n\r\n                // Q\r\n                case 81:\r\n                    this.close();\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    eventer.on(window,\"resize.window\", ()=>{\r\n        for (let i=0; i<floatings.length; i++ ) {\r\n            eventer.resized(floatings[i]._elm);\r\n        }\r\n    });\r\n\r\n    return panels.Floating = Floating;\r\n});"]}