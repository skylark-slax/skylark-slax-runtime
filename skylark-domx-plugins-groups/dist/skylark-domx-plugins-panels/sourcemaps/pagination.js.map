{"version":3,"sources":["pagination.js"],"names":["define","langx","browser","eventer","noder","geom","$","plugins","panels","Panel","Pagination","inherit","klassName","pluginName","options","tagName","css","selectors","firstNavi","prevNavi","nextNavi","lastNavi","numericNavi","numericTxt","totalPages","maxButtonsVisible","currentPage","state","Number","_construct","elm","prototype","call","this","$first","_velm","$prev","$last","$next","$numeric","self","checkCanAction","$elm","is","click","ret","numeric","find","text","pageNo","parseInt","_currentPage","_totalPages","_refresh","updates","totalPageNoBtns","Math","min","begin","end","count","size","visibles","i","filter","removeClass","$btn","eq","show","addClass","hide","changePageNoBtns","changeLabeldBtns","v","undefined","register"],"mappings":"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","file":"../pagination.js","sourcesContent":["define([\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"skylark-domx-plugins-base\",\n  \"./panels\",\n  \"./panel\"\n],function(langx,browser,eventer,noder,geom,$,plugins,panels,Panel){\n\n  'use strict';\n\n  var Pagination = Panel.inherit({\n      klassName : \"Pagination\",\n\n      pluginName : \"lark.panels.pagination\",\n\n      options : {\n          tagName : \"ul\",\n          css : \"\",\n          selectors : {\n              firstNavi : \"li[aria-label='first']\",\n              prevNavi : \"li[aria-label='prev']\",\n              nextNavi : \"li[aria-label='next']\",\n              lastNavi : \"li[aria-label='last']\",\n              numericNavi : \"li:not([aria-label])\",\n              numericTxt  : \"a\"\n          },\n          totalPages: 7,\n          maxButtonsVisible: 5,\n          currentPage: 1     \n      },\n\n      state : {\n          totalPages : Number,\n          currentPage : Number\n      },\n\n      _construct : function(elm,options) {\n        Panel.prototype._construct.call(this,elm,options);\n\n        this.$first = this._velm.$(this.options.selectors.firstNavi);\n        this.$prev = this._velm.$(this.options.selectors.prevNavi);\n        this.$last = this._velm.$(this.options.selectors.lastNavi);\n        this.$next = this._velm.$(this.options.selectors.nextNavi);\n        this.$numeric = this._velm.$(this.options.selectors.numericNavi);\n\n        var self = this;\n\n        function checkCanAction(elm) {\n          var $elm = $(elm);\n          if ($elm.is(\".disabled,.active\")) {\n            return false;\n          } else {\n            return $elm;\n          }\n        }\n\n        this.$first.click(function(){\n          if (!checkCanAction(this)) {\n            return;\n          }\n          self.currentPage(1);\n        });\n\n        this.$prev.click(function(){\n          if (!checkCanAction(this)) {\n            return;\n          }\n          self.currentPage(self.currentPage()-1);\n        });\n\n        this.$last.click(function(){\n          if (!checkCanAction(this)) {\n            return;\n          }\n          self.currentPage(self.totalPages());\n        });\n\n        this.$next.click(function(){\n          if (!checkCanAction(this)) {\n            return;\n          }\n          self.currentPage(self.currentPage()+1);\n        });\n\n        this.$numeric.click(function(){\n          var ret = checkCanAction(this)\n          if (!ret) {\n            return;\n          }\n          var numeric = ret.find(self.options.selectors.numericTxt).text(),\n              pageNo = parseInt(numeric);\n          self.currentPage(pageNo);\n\n        });\n\n        this._currentPage = this.options.currentPage;\n        this._totalPages = this.options.totalPages;\n\n        this._refresh({\n          currentPage : true,\n          totalPages : true\n        });\n      },\n\n      _refresh: function (updates) {\n        var self = this;\n\n        function changePageNoBtns(currentPage,totalPages) {\n\n          // Create the numeric buttons.\n          // Variable of number control in the buttons.\n          var totalPageNoBtns = Math.min(totalPages, self.options.maxButtonsVisible);\n          var begin = 1;\n          var end = begin + totalPageNoBtns - 1;\n\n          /*\n           * Align the values in the begin and end variables if the user has the\n           * possibility that select a page that doens't appear in the paginador.\n           * e.g currentPage = 1, and user go to the 20 page.\n           */\n          while ((currentPage < begin) || (currentPage > end)) {\n            if (currentPage > end) {\n               begin += totalPageNoBtns;\n               end += totalPageNoBtns;\n\n               if (end > totalPages) {\n                 begin = begin - (end - totalPages);\n                 end = totalPages;\n               }\n             } else {\n               begin -= totalPageNoBtns;\n               end -= totalPageNoBtns;\n\n               if (begin < 0) {\n                 end = end + (begin + totalPageNoBtns);\n                 begin = 1;\n               }\n             }\n          }\n         /*\n          * Verify if the user clicks in the last page show by paginator.\n          * If yes, the paginator advances.\n          */\n          if ((currentPage === end) && (totalPages != 1)) {\n            begin = currentPage - 1;\n            end = begin + totalPageNoBtns - 1;\n\n            if (end >= totalPages) {\n              begin = begin - (end - (totalPages));\n              end = totalPages;\n            }\n          }\n\n          /*\n           * Verify it the user clicks in the first page show by paginator.\n           * If yes, the paginator retrogress\n           */\n           if ((begin === currentPage) && (totalPages != 1)) {\n             if (currentPage != 1) {\n               end = currentPage + 1;\n               begin = end - (totalPageNoBtns - 1);\n             }\n           }\n\n           var count = self.$numeric.size(),\n               visibles = end-begin + 1,\n               i = 0;\n\n           self.$numeric.filter(\".active\").removeClass(\"active\");\n           while (i<visibles) {\n             var pageNo = i + begin,\n                 $btn = self.$numeric.eq(i);\n             $btn.find(self.options.selectors.numericTxt).text(i+begin).show();\n             if (pageNo == currentPage) {\n              $btn.addClass(\"active\");\n             }\n             i++;\n           }\n           while (i<count) {\n             self.$numeric.eq(i).find(self.options.selectors.numericTxt).text(i+begin).hide();\n             i++;\n           }\n\n\n        }\n\n        function changeLabeldBtns(currentPage,totalPages) {\n          if (currentPage < 1) {\n            throw('Page can\\'t be less than 1');\n          } else if (currentPage > totalPages) {\n            throw('Page is bigger than total pages');\n          }\n\n          if (totalPages < 1) {\n            throw('Total Pages can\\'t be less than 1');\n          }\n\n          if (currentPage == 1 ) {\n            self.$first.addClass(\"disabled\");\n            self.$prev.addClass(\"disabled\");\n          } else {\n            self.$first.removeClass(\"disabled\");\n            self.$prev.removeClass(\"disabled\");\n          }\n\n          if (currentPage == totalPages ) {\n            self.$last.addClass(\"disabled\");\n            self.$next.addClass(\"disabled\");\n          } else {\n            self.$last.removeClass(\"disabled\");\n            self.$next.removeClass(\"disabled\");\n          }\n        }\n\n        if (updates.currentPage || updates.totalPages) {\n          var currentPage = self.currentPage(),\n              totalPages = self.totalPages();\n\n          changePageNoBtns(currentPage,totalPages);\n          changeLabeldBtns(currentPage,totalPages);\n        }\n\n      },\n\n      currentPage : function(v) {\n        if (v !== undefined) {\n          this._currentPage = v;\n          this._refresh({\n            currentPage : true\n          });            \n          return this;\n        } else {\n          return this._currentPage;\n        }\n      },\n\n      totalPages : function(v) {\n        if (v !== undefined) {\n          this._totalPages = v;\n          this._refresh({\n            totalPages : true\n          });\n          return this;\n        } else {\n          return this._totalPages;\n        }\n      }\n  });\n\n  plugins.register(Pagination);\n\n\n  return panels.Pagination = Pagination;\n});"]}