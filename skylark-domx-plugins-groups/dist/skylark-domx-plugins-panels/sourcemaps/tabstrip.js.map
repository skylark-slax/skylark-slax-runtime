{"version":3,"sources":["tabstrip.js"],"names":["define","langx","browser","eventer","noder","geom","$","plugins","Dropdown","TabButton","panels","Panel","TabStrip","inherit","klassName","pluginName","options","selectors","header","tab","content","tabpane","droptabs","dropdown","dropdownMenu","dropdownTabs","dropdownCaret","visibleTabs","auto","pullDropdownRight","_construct","elm","prototype","call","this","$header","_velm","$tabs","find","$content","$tabpanes","plugin","self","each","idx","tabEl","target","arrange","dropdownTabsSelector","visibleTabsSelector","$container","dropdownLabel","clone","remove","addClass","$dropdownTabs","$visibleTabs","tempElem","hiddenElementWidth","availableSpace","outerWidth","visibleTabsWidth","index","parseInt","x","get","reverse","hasClass","prependTo","first","appendTo","css","is","detach","insertAfter","length","hide","show","activateTab","isNumber","addTab","removeTab","register"],"mappings":"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","file":"../tabstrip.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    \"skylark-domx-browser\",\n    \"skylark-domx-eventer\",\n    \"skylark-domx-noder\",\n    \"skylark-domx-geom\",\n    \"skylark-domx-query\",\n    \"skylark-domx-plugins-base\",\n    \"skylark-domx-plugins-popups/Dropdown\",\n    \"skylark-domx-plugins-toggles/tab\",\n    \"./panels\",\n    \"./panel\"\n], function(langx, browser, eventer, noder, geom,  $, plugins,Dropdown, TabButton,panels,Panel) {\n\n    var TabStrip = Panel.inherit({\n        klassName : \"TabStrip\",\n        pluginName : \"lark.panels.tabstrip\",\n\n        options : {\n          selectors : {\n            header : \".nav-tabs\",\n            tab : \"[data-toggle=\\\"tab\\\"]\",\n            content : \".tab-content\",\n            tabpane : \".tab-pane\"\n          },\n\n          droptabs : {\n            selectors : {\n              dropdown : \"li.droptabs\",\n              dropdownMenu    : \"ul.dropdown-menu\",\n              dropdownTabs    : \"li\",\n              dropdownCaret   : \"b.caret\",\n              visibleTabs     : \">li:not(.dropdown)\",\n            },\n            auto              : true,\n            pullDropdownRight : true,\n\n\n          }\n        },\n\n     _construct : function(elm,options) {\n        Panel.prototype._construct.call(this,elm,options);\n\n        this.$header = this._velm.$(this.options.selectors.header); \n        this.$tabs = this.$header.find(this.options.selectors.tab);\n        this.$content = this._velm.$(this.options.selectors.content);\n        this.$tabpanes = this.$content.find(this.options.selectors.tabpane);\n\n        this.$header.find('[data-toggle=\"dropdown\"]').plugin(Dropdown.prototype.pluginName);\n\n        var self = this;\n        this.$tabs.each(function(idx,tabEl){\n          $(tabEl).plugin(TabButton.prototype.pluginName, {\n            target : self.$tabpanes[idx]\n          });\n        });\n\n      },\n\n      arrange : function () {\n\n        var dropdownTabsSelector = this.options.droptabs.selectors.dropdownTabs,\n            visibleTabsSelector = this.options.droptabs.selectors.visibleTabs;\n\n            $container = this.$header;\n        var dropdown = $container.find(this.options.droptabs.selectors.dropdown);\n        var dropdownMenu = dropdown.find(this.options.droptabs.selectors.dropdownMenu);\n        var dropdownLabel = $('>a', dropdown).clone();\n        var dropdownCaret = $(this.options.droptabs.selectors.dropdownCaret, dropdown);\n\n        // We only want the default label, strip the caret out\n        $(this.options.droptabs.selectors.dropdownCaret, dropdownLabel).remove();\n\n        if (this.options.droptabs.pullDropdownRight) {\n          $(dropdown).addClass('pull-right');\n        }\n\n        var $dropdownTabs = function () {\n          return $(dropdownTabsSelector, dropdownMenu);\n        }\n\n        var $visibleTabs = function () {\n          return $(visibleTabsSelector, $container);\n        }\n\n        function getFirstHiddenElementWidth() {\n          var tempElem=$dropdownTabs().first().clone().appendTo($container).css(\"position\",\"fixed\");\n          var hiddenElementWidth = $(tempElem).outerWidth();\n          $(tempElem).remove();\n          return hiddenElementWidth;\n        }\n\n        function getHiddenElementWidth(elem) {\n          var tempElem=$(elem).clone().appendTo($container).css(\"position\",\"fixed\");\n          var hiddenElementWidth = $(tempElem).outerWidth();\n          $(tempElem).remove();\n          return hiddenElementWidth;\n        }\n\n        function getDropdownLabel() {\n          var labelText = 'Dropdown';\n          if ($(dropdown).hasClass('active')) {\n            labelText = $('>li.active>a', dropdownMenu).html();\n          } else if (dropdownLabel.html().length > 0) {\n            labelText = dropdownLabel.html();\n          }\n\n          labelText = $.trim(labelText);\n\n          if (labelText.length > 10) {\n            labelText = labelText.substring(0, 10) + '...';\n          }\n\n          return labelText;\n        }\n\n        function renderDropdownLabel() {\n          $('>a', dropdown).html(getDropdownLabel() + ' ' + dropdownCaret.prop('outerHTML'));\n        }\n\n        function manageActive(elem) {\n          //fixes a bug where Bootstrap can't remove the 'active' class on elements after they've been hidden inside the dropdown\n          $('a', $(elem)).on('show.bs.tab', function (e) {\n            $(e.relatedTarget).parent().removeClass('active');\n          })\n          $('a', $(elem)).on('shown.bs.tab', function (e) {\n            renderDropdownLabel();\n          })\n\n        }\n\n        function checkDropdownSelection() {\n          if ($($dropdownTabs()).filter('.active').length > 0) {\n            $(dropdown).addClass('active');\n          } else {\n            $(dropdown).removeClass('active');\n          }\n\n          renderDropdownLabel();\n        }\n\n\n        var visibleTabsWidth = function () {\n          var visibleTabsWidth = 0;\n          $($visibleTabs()).each(function( index ) {\n            visibleTabsWidth += parseInt($(this).outerWidth(), 10);\n          });\n          visibleTabsWidth = visibleTabsWidth + parseInt($(dropdown).outerWidth(), 10);\n          return visibleTabsWidth;\n        }\n\n        var availableSpace = function () {\n          return $container.outerWidth()-visibleTabsWidth();\n        }\n\n        if (availableSpace()<0) {//we will hide tabs here\n          var x = availableSpace();\n          $($visibleTabs().get().reverse()).each(function( index ){\n            if (!($(this).hasClass('always-visible'))){\n                $(this).prependTo(dropdownMenu);\n                x=x+$(this).outerWidth();\n            }\n            if (x>=0) {return false;}\n          });\n        }\n\n        if (availableSpace()>getFirstHiddenElementWidth()) { //and here we bring the tabs out\n          var x = availableSpace();\n          $($dropdownTabs()).each(function( index ){\n            if (getHiddenElementWidth(this) < x && !($(this).hasClass('always-dropdown'))){\n              $(this).appendTo($container);\n              x = x-$(this).outerWidth();\n            } else {return false;}\n           });\n\n          if (!this.options.droptabs.pullDropdownRight && !$(dropdown).is(':last-child')) {\n            // If not pulling-right, keep the dropdown at the end of the container.\n            $(dropdown).detach().insertAfter($container.find('li:last-child'));\n          }\n        }\n\n        if ($dropdownTabs().length <= 0) {\n          dropdown.hide();\n        } else {\n          dropdown.show();\n        }\n      },\n\n      //Activates a tab specified as a selector. \n      activateTab : function(tab) {\n        if (langx.isNumber(tab)) {\n          $(this.$tabs[tab]).plugin(TabButton.prototype.pluginName).show();\n        }\n      },\n\n      addTab : function() {\n        //TODO\n      },\n\n      removeTab : function(){\n        //TODO\n      }\n    });\n\n    plugins.register(TabStrip);\n\n\n    return panels.TabStrip = TabStrip;\n\n});"]}