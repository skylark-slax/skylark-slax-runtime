{"version":3,"sources":["accordion.js"],"names":["define","langx","$","elmx","plugins","panels","Panel","Collapsible","Accordion","inherit","klassName","pluginName","options","panel","selector","template","_construct","elm","prototype","call","this","_velm","forEach","panelEl","Pane","group","push","_panels","get","addPanel","remove","expand","expandAll","collapse","collapseAll","active","overrided","toggle","register"],"mappings":";;;;;;;AAACA,QACC,sBACA,qBACA,oBACA,4BACA,WACA,UACA,iBACA,SAASC,EAAMC,EAAEC,EAAKC,EAAQC,EAAOC,EAAMC,GAE3C,IAAIC,EAAYF,EAAMG,SACpBC,UAAY,YAEZC,WAAa,wBAEbC,SACEC,OACEC,SAAW,WACXC,SAAW,OAIdC,WAAa,SAASC,EAAIL,GACzBN,EAAMY,UAAUF,WAAWG,KAAKC,KAAKH,EAAIL,GACzC,IAAIP,KACJe,KAAKC,MAAMnB,EAAEkB,KAAKR,QAAQC,MAAMC,UAAUQ,QAASC,IACjD,IAAIV,EAAQ,IAAIL,EAAUgB,KAAKD,GAC7BE,MAAQL,OAEVf,EAAOqB,KAAKb,KAEdO,KAAKO,QAAUtB,GAGjBA,QACEuB,IAAM,cAMRC,SAAW,aAUXC,OAAS,aAUTC,OAAS,aAWTC,UAAY,aAWZC,SAAW,aAUXC,YAAc,eAiChB,OA5BA1B,EAAUgB,KAAOjB,EAAYE,SAC3BC,UAAY,gBAEZqB,OAAS,WACHX,KAAKR,QAAQa,MAAMU,QACrBf,KAAKR,QAAQa,MAAMU,OAAOF,WAE5Bb,KAAKgB,YACLhB,KAAKR,QAAQa,MAAMU,OAASf,MAG9Ba,SAAW,WACTb,KAAKgB,YACLhB,KAAKR,QAAQa,MAAMU,OAAS,MAG9BE,OAAS,WACPjB,KAAKgB,aAGPN,OAAS,WACPV,KAAKgB,eAKThC,EAAQkC,SAAS9B,GAEVH,EAAOG,UAAYA","file":"../accordion.js","sourcesContent":[" define([\n  \"skylark-langx/langx\",\n  \"skylark-domx-query\",\n  \"skylark-domx-velm\",\n  \"skylark-domx-plugins-base\",\n  \"./panels\",\n  \"./panel\",\n  \"./collapsible\"\n],function(langx,$,elmx,plugins,panels,Panel,Collapsible){\n\n  var Accordion = Panel.inherit({\n    klassName : \"Accordion\",\n\n    pluginName : \"lark.panels.accordion\",\n\n    options : {\n      panel: {\n        selector : \"> .panel\",\n        template : null,\n      }\n    },\n\n     _construct : function(elm,options) {\n      Panel.prototype._construct.call(this,elm,options);\n      var panels = [];\n      this._velm.$(this.options.panel.selector).forEach((panelEl) => {\n        var panel = new Accordion.Pane(panelEl,{\n          group : this\n        });\n        panels.push(panel);\n      });\n      this._panels = panels;\n    },\n\n    panels : {\n      get : function() {\n\n      }\n    },\n\n\n    addPanel : function() {\n\n    },\n\n    /**\n     * Removes a group pane.\n     *\n     * @method remove\n     * @return {Accordion} The current widget.\n     */\n    remove : function() {\n\n    },\n\n    /**\n     * Expands a group pane.\n     *\n     * @method remove\n     * @return {Accordion} The current widget.\n     */\n    expand : function() {\n      // expand a panel\n\n    },\n\n    /**\n     * Expands all group panes.\n     *\n     * @method expandAll\n     * @return {Accordion} The current widget.\n     */\n    expandAll : function() {\n      // expand a panel\n\n    },\n\n    /**\n     * Collapse a group pane.\n     *\n     * @method collapse\n     * @return {Accordion} The current widget.\n     */\n    collapse : function() {\n\n    },\n\n    /**\n     * Collapses all group pane.\n     *\n     * @method collapseAll\n     * @return {Accordion} The current widget.\n     */\n    collapseAll : function() {\n\n    }\n  });\n\n  Accordion.Pane = Collapsible.inherit({\n    klassName : \"AccordionPane\",\n\n    expand : function() {\n      if (this.options.group.active) {\n        this.options.group.active.collapse();\n      }\n      this.overrided();\n      this.options.group.active = this;\n    },\n\n    collapse : function() {\n      this.overrided();\n      this.options.group.active = null;\n    },\n\n    toggle : function() {\n      this.overrided();\n    },\n\n    remove : function() {\n      this.overrided();\n    }\n\n  });\n\n  plugins.register(Accordion);\n\n  return panels.Accordion = Accordion;\n});\n"]}