{"version":3,"sources":["panels.js"],"names":["define","skylark","langx","browser","eventer","noder","geom","$","plugins","panels","CONST","BACKSPACE_KEYCODE","COMMA_KEYCODE","DELETE_KEYCODE","DOWN_ARROW_KEYCODE","ENTER_KEYCODE","TAB_KEYCODE","UP_ARROW_KEYCODE","isKey","keyCode","e","isBackspaceKey","isDeleteKey","isTabKey","isUpArrow","isDownArrow","ENCODED_REGEX","mixin","cleanInput","questionableMarkup","test","html","text","isShiftHeld","shiftKey"],"mappings":";;;;;;;AAAAA,QACE,wBACA,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,qCACA,SAASC,EAAQC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,GACrD,IAAIC,KAEAC,GACHC,kBAAmB,EACnBC,cAAe,IACfC,eAAgB,GAChBC,mBAAoB,GACpBC,cAAe,GACfC,YAAa,EACbC,iBAAkB,IAKfC,EAAQ,SAAgBC,GAC3B,OAAO,SAA0BC,GAChC,OAAOA,EAAED,UAAYA,IAInBE,EAAiBH,EAAMR,EAAMC,mBAC7BW,EAAcJ,EAAMR,EAAMG,gBAC1BU,EAAWL,EAAMR,EAAMM,aACvBQ,EAAYN,EAAMR,EAAMO,kBACxBQ,EAAcP,EAAMR,EAAMI,oBAE1BY,EAAgB,WAyBpB,OAXAxB,EAAMyB,MAAMlB,GACXC,MAAOA,EACPkB,WAZgB,SAAqBC,GAErC,KAAOH,EAAcI,KAAKD,IACzBA,EAAqBtB,EAAE,OAAOwB,KAAKF,GAAoBG,OAIxD,OAAOzB,EAAE,OAAOyB,KAAKH,GAAoBE,QAMzCV,eAAgBA,EAChBC,YAAaA,EACbW,YAjCiB,SAAsBb,GAAK,OAAsB,IAAfA,EAAEc,UAkCrDX,SAAUA,EACVC,UAAWA,EACXC,YAAaA,IAGPjB,EAAQC,OAASA","file":"../panels.js","sourcesContent":["define([\n  \"skylark-langx/skylark\",\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"skylark-domx-plugins-base/plugins\"\n],function(skylark,langx,browser,eventer,noder,geom,$,plugins){\n\tvar panels = {};\n\n\tvar CONST = {\n\t\tBACKSPACE_KEYCODE: 8,\n\t\tCOMMA_KEYCODE: 188, // `,` & `<`\n\t\tDELETE_KEYCODE: 46,\n\t\tDOWN_ARROW_KEYCODE: 40,\n\t\tENTER_KEYCODE: 13,\n\t\tTAB_KEYCODE: 9,\n\t\tUP_ARROW_KEYCODE: 38\n\t};\n\n\tvar isShiftHeld = function isShiftHeld (e) { return e.shiftKey === true; };\n\n\tvar isKey = function isKey (keyCode) {\n\t\treturn function compareKeycodes (e) {\n\t\t\treturn e.keyCode === keyCode;\n\t\t};\n\t};\n\n\tvar isBackspaceKey = isKey(CONST.BACKSPACE_KEYCODE);\n\tvar isDeleteKey = isKey(CONST.DELETE_KEYCODE);\n\tvar isTabKey = isKey(CONST.TAB_KEYCODE);\n\tvar isUpArrow = isKey(CONST.UP_ARROW_KEYCODE);\n\tvar isDownArrow = isKey(CONST.DOWN_ARROW_KEYCODE);\n\n\tvar ENCODED_REGEX = /&[^\\s]*;/;\n\t/*\n\t * to prevent double encoding decodes content in loop until content is encoding free\n\t */\n\tvar cleanInput = function cleanInput (questionableMarkup) {\n\t\t// check for encoding and decode\n\t\twhile (ENCODED_REGEX.test(questionableMarkup)) {\n\t\t\tquestionableMarkup = $('<i>').html(questionableMarkup).text();\n\t\t}\n\n\t\t// string completely decoded now encode it\n\t\treturn $('<i>').text(questionableMarkup).html();\n\t};\n\n\tlangx.mixin(panels, {\n\t\tCONST: CONST,\n\t\tcleanInput: cleanInput,\n\t\tisBackspaceKey: isBackspaceKey,\n\t\tisDeleteKey: isDeleteKey,\n\t\tisShiftHeld: isShiftHeld,\n\t\tisTabKey: isTabKey,\n\t\tisUpArrow: isUpArrow,\n\t\tisDownArrow: isDownArrow\n\t});\n\n\treturn plugins.panels = panels;\n\n});\n"]}